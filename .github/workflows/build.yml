# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build & Test

on:
  push:
    branches: ['main']
    # Publish semver tags as releases.
    tags: ['v*.*.*']

  pull_request:
    branches: ['main']

env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build & Test Code

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Run code linting
        run: npm run lint

      - name: Run code style linting
        run: npm run prettier

      - name: Run build
        run: npm run build

      - name: Run unit tests with coverage
        run: npm run test:unit:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: unittests # optional
          verbose: true # optional (default = false)

  docker:
    name: Push Docker image to Docker Hub

    # Run only if build completes successfully
    needs: build

    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set variable for current date used in container label (see Dockerfile)
      - name: Get Current Date
        id: date
        run: echo "date=$(date --utc +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels, image name) from GIT to use in Docker Build Push step
      # https://github.com/docker/metadata-action
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          # tag = 'main' when push event to 'main' branch
          # tag = 'pr-X' when push event to pull request
          # tag = 'major.minor.patch' when push event of new tag
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      # Setup QEMU for building various versions of container
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Setup Buildx before building container
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to DockerHub
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build and Push image if release tag (in format v1.0.0),
      # tag the image with 'git tag' and along with 'latest'
      # https://github.com/docker/build-push-action
      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # sending build arguments to the Dockerfile
          build-args: |
            GIT_SHA=$GITHUB_SHA
            BUILD_DATE=${{ steps.date.outputs.date }}
            DOCKER_TAG=${{ steps.vars.outputs.tag }}

      # Show image digest from docker build
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # Update Docker Hub repo with description from README.md
      # https://github.com/peter-evans/dockerhub-description
      - name: Update image description in Docker Hub
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          short-description: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}
